{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Trackmania documentation This is a work in progress website. Contribute Feel free to contribute through the github project .","title":"Trackmania documentation"},{"location":"#trackmania-documentation","text":"This is a work in progress website.","title":"Trackmania documentation"},{"location":"#contribute","text":"Feel free to contribute through the github project .","title":"Contribute"},{"location":"nadeo-importer/","text":"Nadeo importer Nadeo Importer is a tool to generate items that can be placed in Trackmania maps. It allows you to turn .fbx files (made with your favorite 3d software, such as Blender or 3ds Max) into .Item.Gbx files, which will be recognized and browsed by Trackmania Map Editor. This version of Nadeo Importer is for the game Trackmania, released in 2020. For the game ManiaPlanet, see https://doc.maniaplanet.com/nadeo-importer/getting-started . Some differences with ManiaPlanet Nadeo Importer are discussed in section About Mesh Shape and Mat gbx files . See section Download and install to get started.","title":"Nadeo importer"},{"location":"nadeo-importer/#nadeo-importer","text":"Nadeo Importer is a tool to generate items that can be placed in Trackmania maps. It allows you to turn .fbx files (made with your favorite 3d software, such as Blender or 3ds Max) into .Item.Gbx files, which will be recognized and browsed by Trackmania Map Editor. This version of Nadeo Importer is for the game Trackmania, released in 2020. For the game ManiaPlanet, see https://doc.maniaplanet.com/nadeo-importer/getting-started . Some differences with ManiaPlanet Nadeo Importer are discussed in section About Mesh Shape and Mat gbx files . See section Download and install to get started.","title":"Nadeo importer"},{"location":"nadeo-importer/01-download-and-install/","text":"Download and install How to install Nadeo Importer First download the importer zip file, and also the sample zip file if you are interested (see below for the download links). The importer must be unzipped in the {Trackmania_exe_dir} folder, which is the folder that contains Trackmania.exe , typically C:\\Program Files\\Ubisoft\\Ubisoft Game Launcher\\games\\Trackmania or C:\\Program Files\\Trackmania . You might neeed administrator rights to unzip and place the importer files in there. This will add some files to your {Trackmania_exe_dir} folder, but the most important one is NadeoImporter.exe . See section How to import an item to learn how to use this executable properly. The sample files are not mandatory, but provide examples that can help you: you can unzip them in the {Trackmania_user_dir} folder, which is typically {My Documents}\\Trackmania . This will create the folder {Trackmania_user_dir}\\Work\\Items\\Samples and fill it with source assets, ready to be imported. Current release Importer zip : https://nadeo-download.cdn.ubi.com/trackmania/NadeoImporter_2021_10_15.zip Sample zip : https://nadeo-download.cdn.ubi.com/trackmania/NadeoImporterSamples_2021_01_19.zip Changelog 2020/12/15: Initial release 2021/01/19: Add support for GameplayId (Turbo, Slow motion, etc.), and also PhysicsId 2021/03/24: Fix crashes linked to wrong UV mappings imported via Nadeo Importer, and detect the issue when importing 2021/04/23: Add CustomMetalPaint in the MatLib 2021/07/07: Update MaterialLib, PhysicsIds and GameplayIds with new materials from the June 2021 update 2021/10/15: Fix MaterialLib (BaseMaterial UVs were used for Lightmap in CustomXyz materials), fix bugs (wrong return code + omitted FbxFile attribute in MeshParams.xml was not handled correctly) All releases Importer zip : https://nadeo-download.cdn.ubi.com/trackmania/NadeoImporter_2020_12_15.zip https://nadeo-download.cdn.ubi.com/trackmania/NadeoImporter_2021_01_19.zip https://nadeo-download.cdn.ubi.com/trackmania/NadeoImporter_2021_03_24.zip https://nadeo-download.cdn.ubi.com/trackmania/NadeoImporter_2021_04_23.zip https://nadeo-download.cdn.ubi.com/trackmania/NadeoImporter_2021_07_07.zip https://nadeo-download.cdn.ubi.com/trackmania/NadeoImporter_2021_10_15.zip Sample zip : https://nadeo-download.cdn.ubi.com/trackmania/NadeoImporterSamples_2020_12_15.zip https://nadeo-download.cdn.ubi.com/trackmania/NadeoImporterSamples_2021_01_19.zip","title":"Download and install"},{"location":"nadeo-importer/01-download-and-install/#download-and-install","text":"","title":"Download and install"},{"location":"nadeo-importer/01-download-and-install/#how-to-install-nadeo-importer","text":"First download the importer zip file, and also the sample zip file if you are interested (see below for the download links). The importer must be unzipped in the {Trackmania_exe_dir} folder, which is the folder that contains Trackmania.exe , typically C:\\Program Files\\Ubisoft\\Ubisoft Game Launcher\\games\\Trackmania or C:\\Program Files\\Trackmania . You might neeed administrator rights to unzip and place the importer files in there. This will add some files to your {Trackmania_exe_dir} folder, but the most important one is NadeoImporter.exe . See section How to import an item to learn how to use this executable properly. The sample files are not mandatory, but provide examples that can help you: you can unzip them in the {Trackmania_user_dir} folder, which is typically {My Documents}\\Trackmania . This will create the folder {Trackmania_user_dir}\\Work\\Items\\Samples and fill it with source assets, ready to be imported.","title":"How to install Nadeo Importer"},{"location":"nadeo-importer/01-download-and-install/#current-release","text":"Importer zip : https://nadeo-download.cdn.ubi.com/trackmania/NadeoImporter_2021_10_15.zip Sample zip : https://nadeo-download.cdn.ubi.com/trackmania/NadeoImporterSamples_2021_01_19.zip","title":"Current release"},{"location":"nadeo-importer/01-download-and-install/#changelog","text":"2020/12/15: Initial release 2021/01/19: Add support for GameplayId (Turbo, Slow motion, etc.), and also PhysicsId 2021/03/24: Fix crashes linked to wrong UV mappings imported via Nadeo Importer, and detect the issue when importing 2021/04/23: Add CustomMetalPaint in the MatLib 2021/07/07: Update MaterialLib, PhysicsIds and GameplayIds with new materials from the June 2021 update 2021/10/15: Fix MaterialLib (BaseMaterial UVs were used for Lightmap in CustomXyz materials), fix bugs (wrong return code + omitted FbxFile attribute in MeshParams.xml was not handled correctly)","title":"Changelog"},{"location":"nadeo-importer/01-download-and-install/#all-releases","text":"Importer zip : https://nadeo-download.cdn.ubi.com/trackmania/NadeoImporter_2020_12_15.zip https://nadeo-download.cdn.ubi.com/trackmania/NadeoImporter_2021_01_19.zip https://nadeo-download.cdn.ubi.com/trackmania/NadeoImporter_2021_03_24.zip https://nadeo-download.cdn.ubi.com/trackmania/NadeoImporter_2021_04_23.zip https://nadeo-download.cdn.ubi.com/trackmania/NadeoImporter_2021_07_07.zip https://nadeo-download.cdn.ubi.com/trackmania/NadeoImporter_2021_10_15.zip Sample zip : https://nadeo-download.cdn.ubi.com/trackmania/NadeoImporterSamples_2020_12_15.zip https://nadeo-download.cdn.ubi.com/trackmania/NadeoImporterSamples_2021_01_19.zip","title":"All releases"},{"location":"nadeo-importer/02-how-to-import-an-item/","text":"How to import an item File organization The source assets (.fbx, .MeshParams.xml and .Item.xml files) must be placed in sub folders of {Trackmania_user_dir}\\Work\\Items . The corresponding imported files (.Item.Gbx) will be created in sub folders of {Trackmania_user_dir}\\Items (whithout \\Work ) For instance: source assets: {Trackmania_user_dir}\\Work\\Items\\Samples\\StaticObjects\\Mesh\\Slope_Base.fbx {Trackmania_user_dir}\\Work\\Items\\Samples\\StaticObjects\\Mesh\\Slope_Base.MeshParams.xml {Trackmania_user_dir}\\Work\\Items\\Samples\\StaticObjects\\Slope_Base.Item.xml imported file: {Trackmania_user_dir}\\Items\\Samples\\StaticObjects\\Slope_Base.Item.gbx So you must create the source assets first. The Samples.zip file that you can download in section Download and install contains examples of such files. For more information about how to create and edit source assets, see the following sections: How to create the fbx file How to create the MeshParams xml file How to create the Item xml file . Import command To generate the .Item.Gbx File: Open a command line window in your {Trackmania_exe_dir} folder. One quick way to do that is to maintain Shift and right-click on this folder in Windows Explorer, and then select \"Open PowerShell window here\" or \"Open command window here\" in the context menu. Type the following command: .\\NadeoImporter Item {Item.xml_Filename_Relative_To_WorkFolder} For instance: .\\NadeoImporter Item Items\\Samples\\StaticObjects\\Slope_Base.Item.xml Notes Wildcard character You can also use the wildcard character * to import several items at once. For example, if you want to import all the items contained in {Trackmania_user_dir}\\Work\\Items\\Samples\\StaticObjects : .\\NadeoImporter Item Items\\Samples\\StaticObjects\\*.Item.xml Icon If you want your item to have an icon in the Map Editor (which is recommended), see section How to add an icon to my item Command arguments The .MeshParams.xml and .fbx files do not appear in the arguments of this command line, because: .Item.xml contains a reference (either explicit or implicit: see tag MeshParamsLink in section How to create the Item xml file ) to the .MeshParams.xml file .MeshParams.xml contains a reference (either excplit or implicit: see attribute FbxFile in section How to create the MeshParams xml file ) to the .fbx file. There is also a facultative command argument: /LogMeshStats . This will give you some information about the fbx you are importing. .\\NadeoImporter Item Items\\Samples\\StaticObjects\\Slope_Base.Item.xml /LogMeshStats PowerShell vs classic command line The .\\ before NadeoImporter is mandatory in PowerShell, but not in classic command line.","title":"How to import an item"},{"location":"nadeo-importer/02-how-to-import-an-item/#how-to-import-an-item","text":"","title":"How to import an item"},{"location":"nadeo-importer/02-how-to-import-an-item/#file-organization","text":"The source assets (.fbx, .MeshParams.xml and .Item.xml files) must be placed in sub folders of {Trackmania_user_dir}\\Work\\Items . The corresponding imported files (.Item.Gbx) will be created in sub folders of {Trackmania_user_dir}\\Items (whithout \\Work ) For instance: source assets: {Trackmania_user_dir}\\Work\\Items\\Samples\\StaticObjects\\Mesh\\Slope_Base.fbx {Trackmania_user_dir}\\Work\\Items\\Samples\\StaticObjects\\Mesh\\Slope_Base.MeshParams.xml {Trackmania_user_dir}\\Work\\Items\\Samples\\StaticObjects\\Slope_Base.Item.xml imported file: {Trackmania_user_dir}\\Items\\Samples\\StaticObjects\\Slope_Base.Item.gbx So you must create the source assets first. The Samples.zip file that you can download in section Download and install contains examples of such files. For more information about how to create and edit source assets, see the following sections: How to create the fbx file How to create the MeshParams xml file How to create the Item xml file .","title":"File organization"},{"location":"nadeo-importer/02-how-to-import-an-item/#import-command","text":"To generate the .Item.Gbx File: Open a command line window in your {Trackmania_exe_dir} folder. One quick way to do that is to maintain Shift and right-click on this folder in Windows Explorer, and then select \"Open PowerShell window here\" or \"Open command window here\" in the context menu. Type the following command: .\\NadeoImporter Item {Item.xml_Filename_Relative_To_WorkFolder} For instance: .\\NadeoImporter Item Items\\Samples\\StaticObjects\\Slope_Base.Item.xml","title":"Import command"},{"location":"nadeo-importer/02-how-to-import-an-item/#notes","text":"","title":"Notes"},{"location":"nadeo-importer/02-how-to-import-an-item/#wildcard-character","text":"You can also use the wildcard character * to import several items at once. For example, if you want to import all the items contained in {Trackmania_user_dir}\\Work\\Items\\Samples\\StaticObjects : .\\NadeoImporter Item Items\\Samples\\StaticObjects\\*.Item.xml","title":"Wildcard character"},{"location":"nadeo-importer/02-how-to-import-an-item/#icon","text":"If you want your item to have an icon in the Map Editor (which is recommended), see section How to add an icon to my item","title":"Icon"},{"location":"nadeo-importer/02-how-to-import-an-item/#command-arguments","text":"The .MeshParams.xml and .fbx files do not appear in the arguments of this command line, because: .Item.xml contains a reference (either explicit or implicit: see tag MeshParamsLink in section How to create the Item xml file ) to the .MeshParams.xml file .MeshParams.xml contains a reference (either excplit or implicit: see attribute FbxFile in section How to create the MeshParams xml file ) to the .fbx file. There is also a facultative command argument: /LogMeshStats . This will give you some information about the fbx you are importing. .\\NadeoImporter Item Items\\Samples\\StaticObjects\\Slope_Base.Item.xml /LogMeshStats","title":"Command arguments"},{"location":"nadeo-importer/02-how-to-import-an-item/#powershell-vs-classic-command-line","text":"The .\\ before NadeoImporter is mandatory in PowerShell, but not in classic command line.","title":"PowerShell vs classic command line"},{"location":"nadeo-importer/03-how-to-create-the-fbx-file/","text":"How to create the fbx file You can export .fbx files from external 3d editors such as Blender or 3ds Max. Materials The file must contain meshes with materials. You can name your materials however you want, but you must remember those names because you will have to bind them to actual Trackmania material names in the .MeshParams.xml file (see section How to create the MeshParams xml file ). UVs Uvs : for most of the static mesh materials, you will need 2 UV layers: a layer named BaseMaterial : base layer of the material, typically mapping your Diffuse texture. a layer named Lightmap : mandatory, needed for lightmap computation in Map Editor. For the Lightmap layer, the UV must not overlap, otherwise it will cause invalid lightmaps ! Some materials will need only one of those two layers, as you can see in the file {Trackmania_exe_dir}\\NadeoImporterMaterialLib.txt In Blender, it's easy to name your layers. In 3dsMax (which is classicaly index-based for layers), you have two options: use the Channel Info utility to name your layers (comes with 3dsmax, available in panel Utility > More > Channel info ) or add the following information to the User Defined Properties (this is what Channel Info would do anyway): MapChannel:1 = BaseMaterial MapChannel:2 = LightMap Special object prefixes The name of the objects contained in the .fbx file are ignored, except if they start with one of the following special prefixes: If the object name is _socket_start , its location is considered a special landmark, which will be interpreted as a spawn location for players. This is useful for all waypoint items (like checkpoint items): see section How to make a waypoint item for more information If the object name starts with _trigger_ (for example: _trigger_A ), its mesh will not be visible, and when a player will go through it, it will trigger a checkpoint or a finish event, depending on the type of item. See section How to make a waypoint item for more information. If the object name starts with _notvisible_ (for example: _notvisible_B ), its mesh will not be visible, but will be collidable (it's an \"invisible wall\" for players). If the object name starts with _notcollidable_ (for example _notcollidable_C ), its mesh will be visible but not collidable, the player will be able to go through it. If the object name starts with _skip_ , its mesh will be completely ignored during the import process (might be useful to have landmarks in your 3d software that will not have any effect on the resulting .Item.Gbx).","title":"How to create the fbx file"},{"location":"nadeo-importer/03-how-to-create-the-fbx-file/#how-to-create-the-fbx-file","text":"You can export .fbx files from external 3d editors such as Blender or 3ds Max.","title":"How to create the fbx file"},{"location":"nadeo-importer/03-how-to-create-the-fbx-file/#materials","text":"The file must contain meshes with materials. You can name your materials however you want, but you must remember those names because you will have to bind them to actual Trackmania material names in the .MeshParams.xml file (see section How to create the MeshParams xml file ).","title":"Materials"},{"location":"nadeo-importer/03-how-to-create-the-fbx-file/#uvs","text":"Uvs : for most of the static mesh materials, you will need 2 UV layers: a layer named BaseMaterial : base layer of the material, typically mapping your Diffuse texture. a layer named Lightmap : mandatory, needed for lightmap computation in Map Editor. For the Lightmap layer, the UV must not overlap, otherwise it will cause invalid lightmaps ! Some materials will need only one of those two layers, as you can see in the file {Trackmania_exe_dir}\\NadeoImporterMaterialLib.txt In Blender, it's easy to name your layers. In 3dsMax (which is classicaly index-based for layers), you have two options: use the Channel Info utility to name your layers (comes with 3dsmax, available in panel Utility > More > Channel info ) or add the following information to the User Defined Properties (this is what Channel Info would do anyway): MapChannel:1 = BaseMaterial MapChannel:2 = LightMap","title":"UVs"},{"location":"nadeo-importer/03-how-to-create-the-fbx-file/#special-object-prefixes","text":"The name of the objects contained in the .fbx file are ignored, except if they start with one of the following special prefixes: If the object name is _socket_start , its location is considered a special landmark, which will be interpreted as a spawn location for players. This is useful for all waypoint items (like checkpoint items): see section How to make a waypoint item for more information If the object name starts with _trigger_ (for example: _trigger_A ), its mesh will not be visible, and when a player will go through it, it will trigger a checkpoint or a finish event, depending on the type of item. See section How to make a waypoint item for more information. If the object name starts with _notvisible_ (for example: _notvisible_B ), its mesh will not be visible, but will be collidable (it's an \"invisible wall\" for players). If the object name starts with _notcollidable_ (for example _notcollidable_C ), its mesh will be visible but not collidable, the player will be able to go through it. If the object name starts with _skip_ , its mesh will be completely ignored during the import process (might be useful to have landmarks in your 3d software that will not have any effect on the resulting .Item.Gbx).","title":"Special object prefixes"},{"location":"nadeo-importer/04-how-to-create-the-meshparams-xml-file/","text":"How to create the MeshParams xml file Just create an empty text file (which has the extension \".txt\" by default) and change its extension by renaming it {ItemName}.MeshParams.xml (for example: Slope_Base.MeshParams.xml ). Open this file in your favorite text editor (for example: Notepad++), and copy-paste the following template: <MeshParams MeshType=\"Static\" Collection=\"Stadium\" Scale=\"1\" FbxFile=\"ItemName.fbx\"> <Materials> <Material Name=\"A\" Link=\"Name1FromTheMaterialLib\" Color=\"F00\" PhysicsId=\"Name1FromThePhysicsIdLib\" GameplayId=\"Name1FromTheGameplayIdLib\" /> <Material Name=\"B\" Link=\"Name2FromTheMaterialLib\" Color=\"F00\" PhysicsId=\"Name2FromThePhysicsIdLib\" GameplayId=\"Name2FromTheGameplayIdLib\" /> </Materials> </MeshParams> Then adapt it to your situation, according to the following explanations: MeshParams tag is mandatory attributes: MeshType is mandatory and should not be changed (\"Static\") Collection is mandatory and should not be changed (\"Stadium\") Scale is facultative. You can set a value greater than 1 to make your item bigger, or less than 1 to make it smaller. But you should not set it to 0 or a negative value. FbxFile is facultative. If this attribute is omitted, then the fbx file is supposed to be next to this xml file, with the same name (but a different extension: .fbx). If the fbx file has a different name or is in a different folder though, you have to put its relative path in this attribute. sub-tags: Materials tag is mandatory, because your mesh is supposed to have materials, that we have to link to the game material library at some point sub-tags: Material : You should put one Material tag for each material contained in your fbx file attributes: Name : the name of the material in the fbx file, that you have chosen when making your model in the 3d software you have used (Blender, 3ds Max...) Link : the name of a material of Trackmania material library. The list of library materials can be found in {Trackmania_exe_dir}\\NadeoImporterMaterialLib.txt , which was placed next to NadeoImporter.exe when you unzipped the importer files (see section Download and install ) Color : facultative. If the linked material is a colorizable one, you can specify the color you want with a 3-digit or 6-digit hexadecimal color code (RGB or RRGGBB). For instance: F00 or FF0000 for red, 0F0 or 00FF00 for green, 00F or 0000FF for blue, FF0 or FFFF00 for yellow, etc. PhysicsId : facultative (and not recommended). Overrides the way the cars will interact physically with the surface. You should not overuse this feature because it is usually a bad idea (for gameplay and fun) to have a surface looking like grass but behaving like dirt. You can find the list of possible values in the PhysicsId library below. GameplayId : facultative. Setting a value different than None will add a special gameplay effect to the surface, like activating free wheeling or slow motion modes. Some of those gameplay effects such as Turbo or ReactorBoost are \"oriented\": the direction of this effect is automatically the local z-axis of the item. You can find the list of possible values in the GameplayId library below. This option is available only for specific values of the Link attribute : see Materials compatible with GameplayId below. You should get something like this: <MeshParams MeshType=\"Static\" Collection=\"Stadium\"> <Materials> <Material Name=\"Road1\" Link=\"RoadDirt\" /> <Material Name=\"Road2\" Link=\"RoadBump\" /> <Material Name=\"Wall\" Link=\"TrackWall\" /> </Materials> </MeshParams> PhysicsId library Here is the list of all PhysicsId in the game. Each one has a different effect on car grip and speed (it also affects sound and skid marks). Each material has a default PhysicsId that you can see in {Trackmania_exe_dir}\\NadeoImporterMaterialLib.txt , next to NadeoImporter.exe (see section Download and install ). You can override this default behavior with the PhysicsId attribute of the Material tag, but it is not recommended (see the description of this attribute above). Asphalt : the actual base material of TrackMania, used on every normal road and platforms Concrete : \"base\" material, but not used for base roads in TM ! Dirt : used in dirt blocks Grass : used in the default grass of the stadium (not to be mistaken with Green surfaces) and as a speed penalty surface Green : used in synthetic grass platforms (not to be mistaken with Grass surfaces) Ice : used in the colorable CustomIce material Metal : used in black platform blocks MetalTrans : mostly used on screens NotCollidable : used for decals, to... not be collidable. But instead of using this PhysicsId, you should rather use the _notcollidable_ prefix in your fbx objects, as described in section How to create the fbx file . Pavement : used in the colorable CustomBricks material Plastic : used in inflatable items introduced in June 2021 update ResonantMetal : also used in black platform blocks, usually makes a noise on collision RoadIce : used in \"bobsleigh\" ice blocks RoadSynthetic : used in bump roads Rock : used in colorable CustomRock material Rubber : used on the sides of the roads, gives speed penalty when hit Sand : used as a speed penalty surface in dirt platform blocks Snow : used in colorable CustomSnow material and as a speed penalty surface TechMagnetic : not used in any game material, makes the car attracted to that surface TechMagneticAccel : not used in any game material, makes the car attracted to that surface and gives it a better acceleration while on it TechSuperMagnetic : not used in any game material, makes the car attracted strongly to that surface Wood : used in colorable CustomRoughWood material GameplayId library Here are the values you can use for the GameplayId attribute of the Material tag: Bumper : makes the car bump a bit Bumper2 : makes the car bump a lot Cruise : makes the car maintain its speed ForceAcceleration : disables breaking until next Reset block or next checkpoint Fragile : makes the car sensitive to hard bumps and crashes, making it harder to handle and accelerate the more damages it takes. Only gets back to normal with a Reset Block FreeWheeling : entirely stops the engine until next Reset block or next checkpoint NoBrakes : disables the car brakes NoGrip : comparable to ice, but way less handling and no drift mechanic until next Reset block or next checkpoint None : no gameplay effect (this is the default value for all game materials) NoSteering : disables steering until next Reset block or next checkpoint ReactorBoost : activates flames at the sides of the wheels that push the car upwards or downwards for some time or until next Reset block (direction of ReactorBoost is along Z-axis: towards positive Z is ReactorBoost Up and towards negative is ReactorBoost Down) ReactorBoost2 : same effect as ReactorBoost , but stronger Reset : disables any ongoing gameplay effects SlowMotion : slows down the behaviour of the car (but not the timer) for some time or until next Reset block Turbo : \"yellow turbo\" blocks, sudden burst of acceleration (direction of Turbo is North / along Z-axis) Turbo2 : \"red turbo\" blocks, stronger burst of acceleration (direction of Turbo2 is North / along the Z-axis) Materials compatible with GameplayId Here are the values of attribute Link that enable the use of attribute GameplayId : PlatformDirt_PlatformTech PlatformGrass_PlatformTech PlatformIce_PlatformTech PlatformTech RoadBump RoadDirt RoadIce RoadTech","title":"How to create the MeshParams xml file"},{"location":"nadeo-importer/04-how-to-create-the-meshparams-xml-file/#how-to-create-the-meshparams-xml-file","text":"Just create an empty text file (which has the extension \".txt\" by default) and change its extension by renaming it {ItemName}.MeshParams.xml (for example: Slope_Base.MeshParams.xml ). Open this file in your favorite text editor (for example: Notepad++), and copy-paste the following template: <MeshParams MeshType=\"Static\" Collection=\"Stadium\" Scale=\"1\" FbxFile=\"ItemName.fbx\"> <Materials> <Material Name=\"A\" Link=\"Name1FromTheMaterialLib\" Color=\"F00\" PhysicsId=\"Name1FromThePhysicsIdLib\" GameplayId=\"Name1FromTheGameplayIdLib\" /> <Material Name=\"B\" Link=\"Name2FromTheMaterialLib\" Color=\"F00\" PhysicsId=\"Name2FromThePhysicsIdLib\" GameplayId=\"Name2FromTheGameplayIdLib\" /> </Materials> </MeshParams> Then adapt it to your situation, according to the following explanations: MeshParams tag is mandatory attributes: MeshType is mandatory and should not be changed (\"Static\") Collection is mandatory and should not be changed (\"Stadium\") Scale is facultative. You can set a value greater than 1 to make your item bigger, or less than 1 to make it smaller. But you should not set it to 0 or a negative value. FbxFile is facultative. If this attribute is omitted, then the fbx file is supposed to be next to this xml file, with the same name (but a different extension: .fbx). If the fbx file has a different name or is in a different folder though, you have to put its relative path in this attribute. sub-tags: Materials tag is mandatory, because your mesh is supposed to have materials, that we have to link to the game material library at some point sub-tags: Material : You should put one Material tag for each material contained in your fbx file attributes: Name : the name of the material in the fbx file, that you have chosen when making your model in the 3d software you have used (Blender, 3ds Max...) Link : the name of a material of Trackmania material library. The list of library materials can be found in {Trackmania_exe_dir}\\NadeoImporterMaterialLib.txt , which was placed next to NadeoImporter.exe when you unzipped the importer files (see section Download and install ) Color : facultative. If the linked material is a colorizable one, you can specify the color you want with a 3-digit or 6-digit hexadecimal color code (RGB or RRGGBB). For instance: F00 or FF0000 for red, 0F0 or 00FF00 for green, 00F or 0000FF for blue, FF0 or FFFF00 for yellow, etc. PhysicsId : facultative (and not recommended). Overrides the way the cars will interact physically with the surface. You should not overuse this feature because it is usually a bad idea (for gameplay and fun) to have a surface looking like grass but behaving like dirt. You can find the list of possible values in the PhysicsId library below. GameplayId : facultative. Setting a value different than None will add a special gameplay effect to the surface, like activating free wheeling or slow motion modes. Some of those gameplay effects such as Turbo or ReactorBoost are \"oriented\": the direction of this effect is automatically the local z-axis of the item. You can find the list of possible values in the GameplayId library below. This option is available only for specific values of the Link attribute : see Materials compatible with GameplayId below. You should get something like this: <MeshParams MeshType=\"Static\" Collection=\"Stadium\"> <Materials> <Material Name=\"Road1\" Link=\"RoadDirt\" /> <Material Name=\"Road2\" Link=\"RoadBump\" /> <Material Name=\"Wall\" Link=\"TrackWall\" /> </Materials> </MeshParams>","title":"How to create the MeshParams xml file"},{"location":"nadeo-importer/04-how-to-create-the-meshparams-xml-file/#physicsid-library","text":"Here is the list of all PhysicsId in the game. Each one has a different effect on car grip and speed (it also affects sound and skid marks). Each material has a default PhysicsId that you can see in {Trackmania_exe_dir}\\NadeoImporterMaterialLib.txt , next to NadeoImporter.exe (see section Download and install ). You can override this default behavior with the PhysicsId attribute of the Material tag, but it is not recommended (see the description of this attribute above). Asphalt : the actual base material of TrackMania, used on every normal road and platforms Concrete : \"base\" material, but not used for base roads in TM ! Dirt : used in dirt blocks Grass : used in the default grass of the stadium (not to be mistaken with Green surfaces) and as a speed penalty surface Green : used in synthetic grass platforms (not to be mistaken with Grass surfaces) Ice : used in the colorable CustomIce material Metal : used in black platform blocks MetalTrans : mostly used on screens NotCollidable : used for decals, to... not be collidable. But instead of using this PhysicsId, you should rather use the _notcollidable_ prefix in your fbx objects, as described in section How to create the fbx file . Pavement : used in the colorable CustomBricks material Plastic : used in inflatable items introduced in June 2021 update ResonantMetal : also used in black platform blocks, usually makes a noise on collision RoadIce : used in \"bobsleigh\" ice blocks RoadSynthetic : used in bump roads Rock : used in colorable CustomRock material Rubber : used on the sides of the roads, gives speed penalty when hit Sand : used as a speed penalty surface in dirt platform blocks Snow : used in colorable CustomSnow material and as a speed penalty surface TechMagnetic : not used in any game material, makes the car attracted to that surface TechMagneticAccel : not used in any game material, makes the car attracted to that surface and gives it a better acceleration while on it TechSuperMagnetic : not used in any game material, makes the car attracted strongly to that surface Wood : used in colorable CustomRoughWood material","title":"PhysicsId library"},{"location":"nadeo-importer/04-how-to-create-the-meshparams-xml-file/#gameplayid-library","text":"Here are the values you can use for the GameplayId attribute of the Material tag: Bumper : makes the car bump a bit Bumper2 : makes the car bump a lot Cruise : makes the car maintain its speed ForceAcceleration : disables breaking until next Reset block or next checkpoint Fragile : makes the car sensitive to hard bumps and crashes, making it harder to handle and accelerate the more damages it takes. Only gets back to normal with a Reset Block FreeWheeling : entirely stops the engine until next Reset block or next checkpoint NoBrakes : disables the car brakes NoGrip : comparable to ice, but way less handling and no drift mechanic until next Reset block or next checkpoint None : no gameplay effect (this is the default value for all game materials) NoSteering : disables steering until next Reset block or next checkpoint ReactorBoost : activates flames at the sides of the wheels that push the car upwards or downwards for some time or until next Reset block (direction of ReactorBoost is along Z-axis: towards positive Z is ReactorBoost Up and towards negative is ReactorBoost Down) ReactorBoost2 : same effect as ReactorBoost , but stronger Reset : disables any ongoing gameplay effects SlowMotion : slows down the behaviour of the car (but not the timer) for some time or until next Reset block Turbo : \"yellow turbo\" blocks, sudden burst of acceleration (direction of Turbo is North / along Z-axis) Turbo2 : \"red turbo\" blocks, stronger burst of acceleration (direction of Turbo2 is North / along the Z-axis)","title":"GameplayId library"},{"location":"nadeo-importer/04-how-to-create-the-meshparams-xml-file/#materials-compatible-with-gameplayid","text":"Here are the values of attribute Link that enable the use of attribute GameplayId : PlatformDirt_PlatformTech PlatformGrass_PlatformTech PlatformIce_PlatformTech PlatformTech RoadBump RoadDirt RoadIce RoadTech","title":"Materials compatible with GameplayId"},{"location":"nadeo-importer/05-how-to-create-the-item-xml-file/","text":"How to create the Item xml file Just create an empty text file (which has the extension \".txt\" by default) and change its extension by renaming it {ItemName}.Item.xml (for example: Slope_Base.Item.xml ). Open this file in your favorite text editor (for example: Notepad++), and copy-paste the following template: <Item Type=\"StaticObject\" Collection=\"Stadium\" AuthorName=\"YourAuthorName\"> <MeshParamsLink File=\"Mesh/ItemName.MeshParams.xml\"/> <Waypoint Type=\"Checkpoint\"/> <Pivots> <Pivot Pos=\"0 0 0\"/> <Pivot Pos=\"0 0 -1.5\"/> <Pivot Pos=\"0 0 1.5\"/> </Pivots> <GridSnap HStep=\"8\" VStep=\"2\"/> <Levitation VStep=\"2\" GhostMode=\"true\"/> <PivotSnap Distance=\"0\"/> <Options OneAxisRotation=\"true\" ManualPivotSwitch=\"true\"/> </Item> Then adapt it to your situation, according to the following explanations: Item tag is mandatory attributes: Type is mandatory and should not be changed (\"StaticObject\") Collection is mandatory and should not be changed (\"Stadium\") AuthorName should be changed to the name you want to be called in the Trackmania creative community :) sub-tags: MeshParamsLink tag is mandatory attribute: File : Facultative. The relative path of the .MeshParams.xml next to the .fbx file. If omitted, the .MeshParams.xml will be expected to have the same name as current .Item.xml file and to be located in a sub-folder \"Mesh\". Waypoint tag is facultative. Use it only if you are making an item which is a special waypoint of the map, like a checkpoint or a finish line. attribute: Type : mandatory. Must be one of the following: \"Start\", \"Checkpoint\", \"Finish\", \"StartFinish\" (\"StartFinish\" is used for multilaps). Note: this is not enough to make a valid waypoint item. See section How to make a waypoint item for more information. Pivots tag is facultative. See section Pivots and placement parameters for more information. sub-tags: Pivot : put one Pivot tag for each pivot you want to add to your item. attribute: Pos : Position of the pivot, in the base of your mesh. (0,0,0) would be the same origin as in the fbx file. GridSnap tag is facultative attributes: HStep : Facultative. A positive real value in meters (0 by default). See Grid Horizontal Size in section Pivots and placement parameters for more information VStep : Facultative. A positive real value in meters (0 by default). See Grid Vertical Size in section Pivots and placement parameters for more information Levitation tag is facultative attributes: VStep : Facultative. A positive real value in meters (0 by default). See Fly Step in section Pivots and placement parameters for more information GhostMode : Facultative. A boolean value: \"true\" or \"false\" (\"false\" by default). See Ghost Mode in section Pivots and placement parameters for more information PivotSnap tag is facultative attribute: Distance : Mandatory. A positive real value in meters, or the special value -1 (-1 by default). See Pivot Snap Distance in section Pivots and placement parameters for more information Options tag is facultative attributes: NotOnItem : Facultative. A boolean value: \"true\" or \"false\" (\"false\" by default). See Not On Object in section Pivots and placement parameters for more information. OneAxisRotation : Facultative. A boolean value: \"true\" or \"false\" (\"false\" by default). See Yaw Only in section Pivots and placement parameters for more information. ManualPivotSwitch : Facultative. A boolean value: \"true\" or \"false\" (\"false\" by default). See Switch pivot manually in section Pivots and placement parameters for more information. AutoRotation : Facultative. A boolean value: \"true\" or \"false\" (\"false\" by default). See Auto Rotation in section Pivots and placement parameters for more information. You should get something like this: <Item Type=\"StaticObject\" Collection=\"Stadium\" AuthorName=\"NadeoSamples\"> <MeshParamsLink/> <GridSnap HStep=\"8\"/> <Options OneAxisRotation=\"true\"/> </Item>","title":"How to create the Item xml file"},{"location":"nadeo-importer/05-how-to-create-the-item-xml-file/#how-to-create-the-item-xml-file","text":"Just create an empty text file (which has the extension \".txt\" by default) and change its extension by renaming it {ItemName}.Item.xml (for example: Slope_Base.Item.xml ). Open this file in your favorite text editor (for example: Notepad++), and copy-paste the following template: <Item Type=\"StaticObject\" Collection=\"Stadium\" AuthorName=\"YourAuthorName\"> <MeshParamsLink File=\"Mesh/ItemName.MeshParams.xml\"/> <Waypoint Type=\"Checkpoint\"/> <Pivots> <Pivot Pos=\"0 0 0\"/> <Pivot Pos=\"0 0 -1.5\"/> <Pivot Pos=\"0 0 1.5\"/> </Pivots> <GridSnap HStep=\"8\" VStep=\"2\"/> <Levitation VStep=\"2\" GhostMode=\"true\"/> <PivotSnap Distance=\"0\"/> <Options OneAxisRotation=\"true\" ManualPivotSwitch=\"true\"/> </Item> Then adapt it to your situation, according to the following explanations: Item tag is mandatory attributes: Type is mandatory and should not be changed (\"StaticObject\") Collection is mandatory and should not be changed (\"Stadium\") AuthorName should be changed to the name you want to be called in the Trackmania creative community :) sub-tags: MeshParamsLink tag is mandatory attribute: File : Facultative. The relative path of the .MeshParams.xml next to the .fbx file. If omitted, the .MeshParams.xml will be expected to have the same name as current .Item.xml file and to be located in a sub-folder \"Mesh\". Waypoint tag is facultative. Use it only if you are making an item which is a special waypoint of the map, like a checkpoint or a finish line. attribute: Type : mandatory. Must be one of the following: \"Start\", \"Checkpoint\", \"Finish\", \"StartFinish\" (\"StartFinish\" is used for multilaps). Note: this is not enough to make a valid waypoint item. See section How to make a waypoint item for more information. Pivots tag is facultative. See section Pivots and placement parameters for more information. sub-tags: Pivot : put one Pivot tag for each pivot you want to add to your item. attribute: Pos : Position of the pivot, in the base of your mesh. (0,0,0) would be the same origin as in the fbx file. GridSnap tag is facultative attributes: HStep : Facultative. A positive real value in meters (0 by default). See Grid Horizontal Size in section Pivots and placement parameters for more information VStep : Facultative. A positive real value in meters (0 by default). See Grid Vertical Size in section Pivots and placement parameters for more information Levitation tag is facultative attributes: VStep : Facultative. A positive real value in meters (0 by default). See Fly Step in section Pivots and placement parameters for more information GhostMode : Facultative. A boolean value: \"true\" or \"false\" (\"false\" by default). See Ghost Mode in section Pivots and placement parameters for more information PivotSnap tag is facultative attribute: Distance : Mandatory. A positive real value in meters, or the special value -1 (-1 by default). See Pivot Snap Distance in section Pivots and placement parameters for more information Options tag is facultative attributes: NotOnItem : Facultative. A boolean value: \"true\" or \"false\" (\"false\" by default). See Not On Object in section Pivots and placement parameters for more information. OneAxisRotation : Facultative. A boolean value: \"true\" or \"false\" (\"false\" by default). See Yaw Only in section Pivots and placement parameters for more information. ManualPivotSwitch : Facultative. A boolean value: \"true\" or \"false\" (\"false\" by default). See Switch pivot manually in section Pivots and placement parameters for more information. AutoRotation : Facultative. A boolean value: \"true\" or \"false\" (\"false\" by default). See Auto Rotation in section Pivots and placement parameters for more information. You should get something like this: <Item Type=\"StaticObject\" Collection=\"Stadium\" AuthorName=\"NadeoSamples\"> <MeshParamsLink/> <GridSnap HStep=\"8\"/> <Options OneAxisRotation=\"true\"/> </Item>","title":"How to create the Item xml file"},{"location":"nadeo-importer/06-how-to-add-an-icon-to-my-item/","text":"How to add an icon to my Item Image file requirements If you want to see an icon for your item in the Map Editor, you need to provide an icon file: The icon must be a .tga file (mandatory) The icon should have a resolution of 64x64 pixels (recommended) You can create .tga files with a lot of bitmap image edition softwares, such as Gimp. The resolution can be different than 64x64, but NadeoImporter will automatically transform it to a 64x64 image, embedded in the .Item.Gbx file. Link the image file to your item Unlike the reference to the .MeshParams.xml in the .Item.xml, or the reference to the .fbx in the .MeshParams.xml, the reference to the icon cannot be explicit, it is always implicit: The icon must have the same base name as the .Item.xml file (but the extension must be .tga) The icon must be placed in a sub-folder called \"Icon\". For instance: If you are trying to make an item from {Trackmania_user_dir}\\Work\\Items\\Samples\\StaticObjects\\Slope_Icon.Item.xml then the program will look for this file: {Trackmania_user_dir}\\Work\\Items\\Samples\\StaticObjects\\Icon\\Slope_Icon.tga If the file is not provided, the item will not have any icon in the Map Editor. About file size The icon will increase the size of the .Item.Gbx file by 16 Ko. But when someone saves a map containing instances of your item, it will be embedded in the .Map.Gbx file without its icon , to save some memory (as the size of embeddable items is limited in .Map.Gbx files). For example, if an item with an icon has a size of 20 Ko, it will only cost approximately 4 Ko in the .Map.Gbx file (even less than that, because embedded items are compressed).","title":"How to add an icon to my Item"},{"location":"nadeo-importer/06-how-to-add-an-icon-to-my-item/#how-to-add-an-icon-to-my-item","text":"","title":"How to add an icon to my Item"},{"location":"nadeo-importer/06-how-to-add-an-icon-to-my-item/#image-file-requirements","text":"If you want to see an icon for your item in the Map Editor, you need to provide an icon file: The icon must be a .tga file (mandatory) The icon should have a resolution of 64x64 pixels (recommended) You can create .tga files with a lot of bitmap image edition softwares, such as Gimp. The resolution can be different than 64x64, but NadeoImporter will automatically transform it to a 64x64 image, embedded in the .Item.Gbx file.","title":"Image file requirements"},{"location":"nadeo-importer/06-how-to-add-an-icon-to-my-item/#link-the-image-file-to-your-item","text":"Unlike the reference to the .MeshParams.xml in the .Item.xml, or the reference to the .fbx in the .MeshParams.xml, the reference to the icon cannot be explicit, it is always implicit: The icon must have the same base name as the .Item.xml file (but the extension must be .tga) The icon must be placed in a sub-folder called \"Icon\". For instance: If you are trying to make an item from {Trackmania_user_dir}\\Work\\Items\\Samples\\StaticObjects\\Slope_Icon.Item.xml then the program will look for this file: {Trackmania_user_dir}\\Work\\Items\\Samples\\StaticObjects\\Icon\\Slope_Icon.tga If the file is not provided, the item will not have any icon in the Map Editor.","title":"Link the image file to your item"},{"location":"nadeo-importer/06-how-to-add-an-icon-to-my-item/#about-file-size","text":"The icon will increase the size of the .Item.Gbx file by 16 Ko. But when someone saves a map containing instances of your item, it will be embedded in the .Map.Gbx file without its icon , to save some memory (as the size of embeddable items is limited in .Map.Gbx files). For example, if an item with an icon has a size of 20 Ko, it will only cost approximately 4 Ko in the .Map.Gbx file (even less than that, because embedded items are compressed).","title":"About file size"},{"location":"nadeo-importer/07-how-to-make-a-waypoint-item/","text":"How to make a waypoint item You can make items which will be considered by the game as \"waypoints\": a start line, a checkpoint, a finish line or a multi-lap start-finish line. First you must add the Waypoint tag in the .Item.xml file, with the correct Type attribute (\"Start\", \"Checkpoint\", \"Finish\", \"StartFinish\"). See section How to create the Item xml file for more information. Wether your item is a \"Start\", \"Checkpoint\", \"Finish\" or \"StartFinish\" waypoint, the .fbx file must contain exactly one object called _socket_start . The location of this object is all that matters (its faces are ignored): it will determine the position of the car when we spawn or respawn on this waypoint. If your item is a \"Checkpoint\", \"Finish\" or \"StartFinish\" waypoint, then the .fbx file must contain at least one object with prefix _trigger_ . These objects will not be visible but the game will detect when the car goes through its faces and trigger the checkpoint / finish event when it happens.","title":"How to make a waypoint item"},{"location":"nadeo-importer/07-how-to-make-a-waypoint-item/#how-to-make-a-waypoint-item","text":"You can make items which will be considered by the game as \"waypoints\": a start line, a checkpoint, a finish line or a multi-lap start-finish line. First you must add the Waypoint tag in the .Item.xml file, with the correct Type attribute (\"Start\", \"Checkpoint\", \"Finish\", \"StartFinish\"). See section How to create the Item xml file for more information. Wether your item is a \"Start\", \"Checkpoint\", \"Finish\" or \"StartFinish\" waypoint, the .fbx file must contain exactly one object called _socket_start . The location of this object is all that matters (its faces are ignored): it will determine the position of the car when we spawn or respawn on this waypoint. If your item is a \"Checkpoint\", \"Finish\" or \"StartFinish\" waypoint, then the .fbx file must contain at least one object with prefix _trigger_ . These objects will not be visible but the game will detect when the car goes through its faces and trigger the checkpoint / finish event when it happens.","title":"How to make a waypoint item"},{"location":"nadeo-importer/08-pivots-and-placement-parameters/","text":"Pivots and placement parameters Items made with NadeoImporter can be placed in maps with the Advanced Map Editor, in Item mode. This article explains the influence of pivots and placement parameters on how the item is placed in the map. You can set pivots and placement parameters in the .Item.xml file: see section How to create the Item xml file for more information. Pivots When you place an item in the map, the mouse cursor is aiming at a particular point in the map. But how should the item be placed compared to this point? If your item is a cube, should the editor place the item so that the cursor point is at the center of the cube ? Or the center of the bottom face? Or one corner of the cube? Pivots are here to answer that question: a pivot is a point of the item that will coincide with the point of the map that is aimed by the cursor. An item can have multiple pivots. In that case, the Map Editor might choose automatically one pivot according to the context, or you might be able to press the Q key ( A with azerty keyboards) to cycle through the pivots of the current item: see the placement parameter Switch pivot manually for more information. If an item has no pivot, the Map Editor will consider that it has one pivot at the coordinate (0,0,0). Pivots can also be used as magnets to help align items when you place them on each other: see Pivot Snap Distance for more information. Placement parameters These are advanced parameters to help mappers place the item in the map. They are numerous and sometimes a bit difficult to understand. Just leave the default values, unless you have a specific need for your item. Three of them are far more useful than all the others: Fly Step , Grid Horizontal Size and Ghost mode . You can read the explanations of these three and ignore all the others! Main placement parameters Fly Step : If 0, the item will always be placed \"on something\": on the ground, on a wall, on another item, etc. whatever is aimed by the cursor. If greater than 0, the item can fly above the ground: each time you scroll with the mouse wheel (or press the PgUp / PgDown keys), the item will be offseted vertically by this step (in meters). Grid Horizontal Size : If greater than 0, the item will be snapped to the intersections of an invisible horizontal grid, and the distance between the parallel lines of this grid will be this Grid Horizontal Size (in meters). If 0, there will be no horizontal snapping, you can place the item exactly where you want (but it will be difficult to align several items or align items with blocks). Ghost mode : If activated, the item will never be placed \"on anything\", it will completely ignore surrounding blocks and items, going through them if necessary. Advanced placement parameters Switch pivot manually : If activated, the only way to change the pivot to use will be the Q key ( A with azerty keyboard). If deactivated, the Map Editor will automatically change the pivot according to the direction of the surface you are aiming with the cursor (for example it may select the lowest pivot if you are aiming at the floor, and the highest pivot if you are aiming at a ceiling). If the editor selects several pivot candidates, you can cycle through them with the Q key ( A with azerty keyboard). Fly Offset : Offsets vertically the invisible horizontal planes on which the cursor moves when it is in the air. For example, if the Fly Step parameter is 4 meters and the the Fly Offset is 0 meter, when you scroll with the mouse wheel, the cursor will move to the coordinates y = 0, 4, 8, 12, 16... m. But if you set the Fly Offset to 1 meter, then the cursor will be placed at y = 1, 5, 9, 13, 17... m. This parameter has no effect if Fly Step is 0. Grid Horizontal Offset : It is recommended to leave this parameter to 0, unless you really know what you are doing. It offsets the horizontal grid by this amount of meters, in both horizontal axis (x and z). The only value that might be useful sometimes would be half of Grid Horizontal Size , but even in that case it is probably a better idea to divide Grid Horizontal Size by 2 instead. Grid Vertical Size : If greater than 0, the item will be snapped on the vertical axis, and the value is the step of this snapping in meters. In other words, it sets the snapping along the y axis, just as the Grid Horizontal Size sets the snapping along the x and z axis. The difference with Fly Step is subtle: unlike Fly Step , Grid Vertical Size does not enable the item to fly. For instance, it can be used for an item which is meant to be placed on walls, to limit the available heights and then make it easy to align them. But if your item's Fly Step and Grid Vertical Size are both greater than 0, it is recommended to set the same value on both parameters. Grid Vertical Offset : No effect if Grid Vertical Size equals 0. Otherwise, it offsets the available heights by this value in meters. For example, if Grid Vertical Size is 8 and Grid Vertical Offset is 2, the available heights are y = 2, 10, 18, 26, 34... m. If the item's Fly Offset is different from zero, it is recommended to put the same value in Grid Vertical Offset . Yaw Only : If activated, the item can be rotated around the vertical axis only (y), by 90\u00b0 with the right mouse button, or by 15\u00b0 with the Numpad+ or Numpad- keys. If deactivated, it can also be rotated in other directions using the arrow keys. Not On Object : If activated, the item cannot be placed on another item, it can only be placed on blocks (or in the air, if Fly Step is greater than 0). It is recommended to leave it deactivated. Auto Rotation : If activated, the Map Editor will try to automatically rotate the item you are about to place according to the direction of the surface you are aiming at with the mouse pointer. It can be useful for items which are supposed to stay perpendicular to the ground for example. Note: this will not work if there is any grid snapping, so both Grid Horizontal Size and Grid Vertical Size must be set to 0. Pivot Snap Distance : When you are about to place a new item on another item (in other words the mouse pointer is aiming at an item already placed on the map), the editor might try to snap the new item so that its current pivot would be placed exactly at the same spot as one of the pivots of the other item, as if the pivots of the already placed item were magnets that attract the pivot of the new item. If you do not want this feature for your item, set the value to 0. Otherwise, choose a positive value which will be the distance of this attraction (in meters), or use the special value -1 to let the editor choose an automatic distance. About Free ground item and Free item modes When you are already in Item mode in the Map Editor, you can activate the \"Free ground item mode\" or \"Free item mode\" by clicking several times on the tree-shaped Item mode icon (the shape of the item mode icon changes). In these modes, all the placement parameters of the current item are ignored and replaced by some default parameters with tiny Grid Horizontal Size . The difference between \"Free ground item mode\" and \"Free item mode\" is that \"Free item mode\" also has a tiny Fly Step (instead of 0) and Ghost Mode .","title":"Pivots and placement parameters"},{"location":"nadeo-importer/08-pivots-and-placement-parameters/#pivots-and-placement-parameters","text":"Items made with NadeoImporter can be placed in maps with the Advanced Map Editor, in Item mode. This article explains the influence of pivots and placement parameters on how the item is placed in the map. You can set pivots and placement parameters in the .Item.xml file: see section How to create the Item xml file for more information.","title":"Pivots and placement parameters"},{"location":"nadeo-importer/08-pivots-and-placement-parameters/#pivots","text":"When you place an item in the map, the mouse cursor is aiming at a particular point in the map. But how should the item be placed compared to this point? If your item is a cube, should the editor place the item so that the cursor point is at the center of the cube ? Or the center of the bottom face? Or one corner of the cube? Pivots are here to answer that question: a pivot is a point of the item that will coincide with the point of the map that is aimed by the cursor. An item can have multiple pivots. In that case, the Map Editor might choose automatically one pivot according to the context, or you might be able to press the Q key ( A with azerty keyboards) to cycle through the pivots of the current item: see the placement parameter Switch pivot manually for more information. If an item has no pivot, the Map Editor will consider that it has one pivot at the coordinate (0,0,0). Pivots can also be used as magnets to help align items when you place them on each other: see Pivot Snap Distance for more information.","title":"Pivots"},{"location":"nadeo-importer/08-pivots-and-placement-parameters/#placement-parameters","text":"These are advanced parameters to help mappers place the item in the map. They are numerous and sometimes a bit difficult to understand. Just leave the default values, unless you have a specific need for your item. Three of them are far more useful than all the others: Fly Step , Grid Horizontal Size and Ghost mode . You can read the explanations of these three and ignore all the others!","title":"Placement parameters"},{"location":"nadeo-importer/08-pivots-and-placement-parameters/#main-placement-parameters","text":"Fly Step : If 0, the item will always be placed \"on something\": on the ground, on a wall, on another item, etc. whatever is aimed by the cursor. If greater than 0, the item can fly above the ground: each time you scroll with the mouse wheel (or press the PgUp / PgDown keys), the item will be offseted vertically by this step (in meters). Grid Horizontal Size : If greater than 0, the item will be snapped to the intersections of an invisible horizontal grid, and the distance between the parallel lines of this grid will be this Grid Horizontal Size (in meters). If 0, there will be no horizontal snapping, you can place the item exactly where you want (but it will be difficult to align several items or align items with blocks). Ghost mode : If activated, the item will never be placed \"on anything\", it will completely ignore surrounding blocks and items, going through them if necessary.","title":"Main placement parameters"},{"location":"nadeo-importer/08-pivots-and-placement-parameters/#advanced-placement-parameters","text":"Switch pivot manually : If activated, the only way to change the pivot to use will be the Q key ( A with azerty keyboard). If deactivated, the Map Editor will automatically change the pivot according to the direction of the surface you are aiming with the cursor (for example it may select the lowest pivot if you are aiming at the floor, and the highest pivot if you are aiming at a ceiling). If the editor selects several pivot candidates, you can cycle through them with the Q key ( A with azerty keyboard). Fly Offset : Offsets vertically the invisible horizontal planes on which the cursor moves when it is in the air. For example, if the Fly Step parameter is 4 meters and the the Fly Offset is 0 meter, when you scroll with the mouse wheel, the cursor will move to the coordinates y = 0, 4, 8, 12, 16... m. But if you set the Fly Offset to 1 meter, then the cursor will be placed at y = 1, 5, 9, 13, 17... m. This parameter has no effect if Fly Step is 0. Grid Horizontal Offset : It is recommended to leave this parameter to 0, unless you really know what you are doing. It offsets the horizontal grid by this amount of meters, in both horizontal axis (x and z). The only value that might be useful sometimes would be half of Grid Horizontal Size , but even in that case it is probably a better idea to divide Grid Horizontal Size by 2 instead. Grid Vertical Size : If greater than 0, the item will be snapped on the vertical axis, and the value is the step of this snapping in meters. In other words, it sets the snapping along the y axis, just as the Grid Horizontal Size sets the snapping along the x and z axis. The difference with Fly Step is subtle: unlike Fly Step , Grid Vertical Size does not enable the item to fly. For instance, it can be used for an item which is meant to be placed on walls, to limit the available heights and then make it easy to align them. But if your item's Fly Step and Grid Vertical Size are both greater than 0, it is recommended to set the same value on both parameters. Grid Vertical Offset : No effect if Grid Vertical Size equals 0. Otherwise, it offsets the available heights by this value in meters. For example, if Grid Vertical Size is 8 and Grid Vertical Offset is 2, the available heights are y = 2, 10, 18, 26, 34... m. If the item's Fly Offset is different from zero, it is recommended to put the same value in Grid Vertical Offset . Yaw Only : If activated, the item can be rotated around the vertical axis only (y), by 90\u00b0 with the right mouse button, or by 15\u00b0 with the Numpad+ or Numpad- keys. If deactivated, it can also be rotated in other directions using the arrow keys. Not On Object : If activated, the item cannot be placed on another item, it can only be placed on blocks (or in the air, if Fly Step is greater than 0). It is recommended to leave it deactivated. Auto Rotation : If activated, the Map Editor will try to automatically rotate the item you are about to place according to the direction of the surface you are aiming at with the mouse pointer. It can be useful for items which are supposed to stay perpendicular to the ground for example. Note: this will not work if there is any grid snapping, so both Grid Horizontal Size and Grid Vertical Size must be set to 0. Pivot Snap Distance : When you are about to place a new item on another item (in other words the mouse pointer is aiming at an item already placed on the map), the editor might try to snap the new item so that its current pivot would be placed exactly at the same spot as one of the pivots of the other item, as if the pivots of the already placed item were magnets that attract the pivot of the new item. If you do not want this feature for your item, set the value to 0. Otherwise, choose a positive value which will be the distance of this attraction (in meters), or use the special value -1 to let the editor choose an automatic distance.","title":"Advanced placement parameters"},{"location":"nadeo-importer/08-pivots-and-placement-parameters/#about-free-ground-item-and-free-item-modes","text":"When you are already in Item mode in the Map Editor, you can activate the \"Free ground item mode\" or \"Free item mode\" by clicking several times on the tree-shaped Item mode icon (the shape of the item mode icon changes). In these modes, all the placement parameters of the current item are ignored and replaced by some default parameters with tiny Grid Horizontal Size . The difference between \"Free ground item mode\" and \"Free item mode\" is that \"Free item mode\" also has a tiny Fly Step (instead of 0) and Ghost Mode .","title":"About Free ground item and Free item modes"},{"location":"nadeo-importer/09-about-mesh-shape-and-mat-gbx-files/","text":"About Mesh, Shape and Mat Gbx files Those who have been using the old NadeoImporter from Maniaplanet might wonder what happened to .Mesh.Gbx, .Shape.Gbx and .Mat.Gbx files that .Item.Gbx used to depend on. The short answer is: \"forget about them\". NadeoImporter and in-game editors usually produce .Item.gbx files which have no external dependencies (which means if you want to give this item to a friend you can juste give them the .Item.Gbx file, there is no other file it depends on). However it is still possible to make .Mesh.Gbx, .Shape.Gbx or .Mat.Gbx files, but for very specific purposes. If you are curious, see the details below. Mesh and Shape files You can create .Mesh.Gbx and .Shape.Gbx files with the following command line: .\\NadeoImporter Mesh {fbxSourceFileNameRelativeToWorkFolder} For instance: .\\NadeoImporter Mesh Items\\Samples\\StaticObjects\\Mesh\\Slope_Base.fbx But you cannot use those files to build a .Item.Gbx files (there are no more Phy and Vis tags in the .Item.xml, where there used to be an explicit link to .Mesh.Gbx and .Shape.Gbx files). The only use of those files now is that you can import them in the Mesh Modeler (the in-game 3d mesh editor, that you can access through the Map Editor, by creating an item, and editing its mesh). Mat Gbx files .Mat.Gbx are \"custom material\" files, which usually depend on several .dds \"texture\" files. It is still possible to create such files from the Mesh Modeler, but it is generally not recommended, because the Map Editor will refuse to embed into the .Map.Gbx file any item which depends on a .Mat.Gbx file. If you save your map containing those items with custom materials anyway, you will still be able to open it in the Map Editor, but not anywhere else (not even in Local > Play a map). So there is not much point to create \"custom materials\", but it might still be useful to shoot nice videos from the Media Tracker (that you can access from the Map Editor).","title":"About Mesh, Shape and Mat Gbx files"},{"location":"nadeo-importer/09-about-mesh-shape-and-mat-gbx-files/#about-mesh-shape-and-mat-gbx-files","text":"Those who have been using the old NadeoImporter from Maniaplanet might wonder what happened to .Mesh.Gbx, .Shape.Gbx and .Mat.Gbx files that .Item.Gbx used to depend on. The short answer is: \"forget about them\". NadeoImporter and in-game editors usually produce .Item.gbx files which have no external dependencies (which means if you want to give this item to a friend you can juste give them the .Item.Gbx file, there is no other file it depends on). However it is still possible to make .Mesh.Gbx, .Shape.Gbx or .Mat.Gbx files, but for very specific purposes. If you are curious, see the details below.","title":"About Mesh, Shape and Mat Gbx files"},{"location":"nadeo-importer/09-about-mesh-shape-and-mat-gbx-files/#mesh-and-shape-files","text":"You can create .Mesh.Gbx and .Shape.Gbx files with the following command line: .\\NadeoImporter Mesh {fbxSourceFileNameRelativeToWorkFolder} For instance: .\\NadeoImporter Mesh Items\\Samples\\StaticObjects\\Mesh\\Slope_Base.fbx But you cannot use those files to build a .Item.Gbx files (there are no more Phy and Vis tags in the .Item.xml, where there used to be an explicit link to .Mesh.Gbx and .Shape.Gbx files). The only use of those files now is that you can import them in the Mesh Modeler (the in-game 3d mesh editor, that you can access through the Map Editor, by creating an item, and editing its mesh).","title":"Mesh and Shape files"},{"location":"nadeo-importer/09-about-mesh-shape-and-mat-gbx-files/#mat-gbx-files","text":".Mat.Gbx are \"custom material\" files, which usually depend on several .dds \"texture\" files. It is still possible to create such files from the Mesh Modeler, but it is generally not recommended, because the Map Editor will refuse to embed into the .Map.Gbx file any item which depends on a .Mat.Gbx file. If you save your map containing those items with custom materials anyway, you will still be able to open it in the Map Editor, but not anywhere else (not even in Local > Play a map). So there is not much point to create \"custom materials\", but it might still be useful to shoot nice videos from the Media Tracker (that you can access from the Map Editor).","title":"Mat Gbx files"},{"location":"web-services/","text":"Web services You can create your credentials on the developer website (api.trackmania.com) . Documentation The available routes are described here . Authentication After retrieving your client ID you need to get an access token. All the methods to get one are described in auth .","title":"Web services"},{"location":"web-services/#web-services","text":"You can create your credentials on the developer website (api.trackmania.com) .","title":"Web services"},{"location":"web-services/#documentation","text":"The available routes are described here .","title":"Documentation"},{"location":"web-services/#authentication","text":"After retrieving your client ID you need to get an access token. All the methods to get one are described in auth .","title":"Authentication"},{"location":"web-services/auth/","text":"Auth Authentication is available through OAuth2. Registration You can register your application and get your credentials at api.trackmania.com . After you created your application, make sure to save your Identifier (client ID) and Secret (client secret) for later. Grants Auth code flow Redirect the user to https://api.trackmania.com/oauth/authorize with the following query parameters: response_type : code client_id : The client ID (\"Identifier\") you created in the manager. scope : Space separated value of scopes. See here for more information. redirect_uri : One of the redirect URIs in the application you created in the manager. state : A non predictable random string. You should store this value and check if the value is the same at later stage. After the user authorized your application, they are redirected to the redirect_uri with these query parameters: code : A code you need to exchange for an access token. state : Check that this is the same value as the one you generated at step 1. The application should now issue a POST request to https://api.trackmania.com/api/access_token with these parameters: grant_type : authorization_code client_id : Your client ID. client_secret : Your client secret. code : The code from stage 2. redirect_uri : The redirect URI that was used in stage 1. The answer of stage 3 will contain: token_type : This determines how you'll use the token. bearer means you send it alongside your requests in the Authorization header with the format Bearer <token> . expires_in : The number of seconds this token will remain valid. access_token : The token you need to access the endpoints on api.trackmania.com . Client credentials This is meant to be used for machine-to-machine authentication. Note that this token will not be associated with a user, so not all api.trackmania.com endpoints might make sense in this scenario. Issue a POST request to https://api.trackmania.com/api/access_token with the parameters: grant_type : client_credentials client_id : The client ID (\"Identifier\") you created in the manager. client_secret : The client secret (\"Secret\") associated with your client ID. scope : Space separated value of scopes. See here for more information. The answer will contain: token_type : This determines how you'll use the token. bearer means you send it alongside your requests in the Authorization header with the format Bearer <token> . expires_in : The number of seconds this token will remain valid. access_token : The token you need to access the endpoints on api.trackmania.com . Implicit grant As it's no longer a good practice, implicit grant won't be available. Scopes For now, only an empty scope is supported.","title":"Auth"},{"location":"web-services/auth/#auth","text":"Authentication is available through OAuth2.","title":"Auth"},{"location":"web-services/auth/#registration","text":"You can register your application and get your credentials at api.trackmania.com . After you created your application, make sure to save your Identifier (client ID) and Secret (client secret) for later.","title":"Registration"},{"location":"web-services/auth/#grants","text":"","title":"Grants"},{"location":"web-services/auth/#auth-code-flow","text":"Redirect the user to https://api.trackmania.com/oauth/authorize with the following query parameters: response_type : code client_id : The client ID (\"Identifier\") you created in the manager. scope : Space separated value of scopes. See here for more information. redirect_uri : One of the redirect URIs in the application you created in the manager. state : A non predictable random string. You should store this value and check if the value is the same at later stage. After the user authorized your application, they are redirected to the redirect_uri with these query parameters: code : A code you need to exchange for an access token. state : Check that this is the same value as the one you generated at step 1. The application should now issue a POST request to https://api.trackmania.com/api/access_token with these parameters: grant_type : authorization_code client_id : Your client ID. client_secret : Your client secret. code : The code from stage 2. redirect_uri : The redirect URI that was used in stage 1. The answer of stage 3 will contain: token_type : This determines how you'll use the token. bearer means you send it alongside your requests in the Authorization header with the format Bearer <token> . expires_in : The number of seconds this token will remain valid. access_token : The token you need to access the endpoints on api.trackmania.com .","title":"Auth code flow"},{"location":"web-services/auth/#client-credentials","text":"This is meant to be used for machine-to-machine authentication. Note that this token will not be associated with a user, so not all api.trackmania.com endpoints might make sense in this scenario. Issue a POST request to https://api.trackmania.com/api/access_token with the parameters: grant_type : client_credentials client_id : The client ID (\"Identifier\") you created in the manager. client_secret : The client secret (\"Secret\") associated with your client ID. scope : Space separated value of scopes. See here for more information. The answer will contain: token_type : This determines how you'll use the token. bearer means you send it alongside your requests in the Authorization header with the format Bearer <token> . expires_in : The number of seconds this token will remain valid. access_token : The token you need to access the endpoints on api.trackmania.com .","title":"Client credentials"},{"location":"web-services/auth/#implicit-grant","text":"As it's no longer a good practice, implicit grant won't be available.","title":"Implicit grant"},{"location":"web-services/auth/#scopes","text":"For now, only an empty scope is supported.","title":"Scopes"}]}